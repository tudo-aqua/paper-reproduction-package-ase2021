;  depth   = 3
;  nconst  = 6
;  assertions = 7
;  timeout = 2500
;  time    = {'smt_solvers/QF_S/z3str3/': 2500, 'smt_solvers/QF_S/z3seq/': 0.49825596809387207, 'smt_solvers/QF_S/cvc4/': 2500, 'smt_solvers/QF_S/z3str3fed/': 2500}
;  score   = 0.0
;  stdout  = {'smt_solvers/QF_S/z3str3/': 'crash', 'smt_solvers/QF_S/z3seq/': 'sat', 'smt_solvers/QF_S/cvc4/': 'timeout', 'smt_solvers/QF_S/z3str3fed/': 'crash'}
(set-logic QF_S)(declare-fun var0 () String)(declare-fun var1 () String)(declare-fun var2 () String)(declare-fun var3 () String)(declare-fun var4 () String)(declare-fun var5 () String)(declare-fun var6 () Int)(declare-fun var7 () Int)(declare-fun var8 () Int)(declare-fun var9 () Int)(declare-fun var10 () Int)(declare-fun var11 () Int)(declare-fun var12 () Bool)(declare-fun var13 () Bool)(declare-fun var14 () Bool)(declare-fun var15 () Bool)(declare-fun var16 () Bool)(declare-fun var17 () Bool)(assert (not (str.prefixof var1 var0)))(assert (< (str.to.int (str.substr var2 2 var11)) (str.len (str.replace var5 var1 var2))))(assert (str.prefixof (str.at var3 var7) (str.replace (str.replace var4 var0 var4) (str.substr var4 0 var8) (str.replace var0 var1 var5))))(assert (str.contains (str.substr var5 4 10) (str.replace var5 var5 "d?G_9)]4US")))(assert (str.prefixof (str.at var1 var10) (str.++ var3 var0)))(assert (> var6 var8))(assert (> (str.indexof var0 var1 var11) (str.len var5)))(check-sat)