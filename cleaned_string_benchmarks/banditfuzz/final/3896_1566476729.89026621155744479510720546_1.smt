;  depth   = 3
;  nconst  = 6
;  assertions = 7
;  timeout = 2500
;  time    = {'smt_solvers/QF_S/cvc4/': 1.3154897689819336, 'smt_solvers/QF_S/z3str3/': 0.16133499145507812, 'smt_solvers/QF_S/z3str3fed/': 0.07606673240661621, 'smt_solvers/QF_S/z3seq/': 0.09371709823608398}
;  score   = 1.1541547775268555
;  stdout  = {'smt_solvers/QF_S/cvc4/': 'unsat', 'smt_solvers/QF_S/z3str3/': 'unsat', 'smt_solvers/QF_S/z3str3fed/': 'unsat', 'smt_solvers/QF_S/z3seq/': 'unsat'}
(set-logic QF_S)(declare-fun var0 () String)(declare-fun var1 () String)(declare-fun var2 () String)(declare-fun var3 () String)(declare-fun var4 () String)(declare-fun var5 () String)(declare-fun var6 () Int)(declare-fun var7 () Int)(declare-fun var8 () Int)(declare-fun var9 () Int)(declare-fun var10 () Int)(declare-fun var11 () Int)(declare-fun var12 () Bool)(declare-fun var13 () Bool)(declare-fun var14 () Bool)(declare-fun var15 () Bool)(declare-fun var16 () Bool)(declare-fun var17 () Bool)(assert (<= (str.len var3) (str.indexof (str.substr var4 var9 var11) (str.replace var5 "Ok1)YPE|>z" var2) (str.indexof var3 var0 9))))(assert (str.contains (str.at var3 1) (str.substr var5 var7 var8)))(assert (str.contains "+0-TY0VeAr" var3))(assert (< (str.indexof var2 var1 var9) (str.len (str.substr var3 var7 var10))))(assert (not var14))(assert (str.in.re var3 re.allchar))(assert (str.in.re (str.replace (str.at var5 var8) (str.at var1 var6) (str.++ var3 var3)) (re.+ (re.* re.allchar))))(check-sat)