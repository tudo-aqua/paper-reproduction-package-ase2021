;  depth   = 3
;  nconst  = 6
;  assertions = 7
;  timeout = 2500
;  time    = {'smt_solvers/QF_S/cvc4/': 0.2832813262939453, 'smt_solvers/QF_S/z3str3fed/': 0.07425355911254883, 'smt_solvers/QF_S/z3seq/': 0.09881877899169922, 'smt_solvers/QF_S/z3str3/': 0.10504746437072754}
;  score   = 0.17823386192321777
;  stdout  = {'smt_solvers/QF_S/cvc4/': 'unsat', 'smt_solvers/QF_S/z3str3fed/': 'unsat', 'smt_solvers/QF_S/z3seq/': 'unsat', 'smt_solvers/QF_S/z3str3/': 'unsat'}
(set-logic QF_S)(declare-fun var0 () String)(declare-fun var1 () String)(declare-fun var2 () String)(declare-fun var3 () String)(declare-fun var4 () String)(declare-fun var5 () String)(declare-fun var6 () Int)(declare-fun var7 () Int)(declare-fun var8 () Int)(declare-fun var9 () Int)(declare-fun var10 () Int)(declare-fun var11 () Int)(declare-fun var12 () Bool)(declare-fun var13 () Bool)(declare-fun var14 () Bool)(declare-fun var15 () Bool)(declare-fun var16 () Bool)(declare-fun var17 () Bool)(assert (str.prefixof var2 var4))(assert (< (str.len var5) (str.len (str.at var5 var9))))(assert (str.contains (str.replace (str.replace var4 var4 var0) (str.at var0 var9) (str.substr var2 var8 var10)) (str.replace (str.at var4 var10) (str.substr var4 var8 var8) (str.replace var0 "*\\)87L_ry%" "C&yfZxPf&]"))))(assert (str.contains (str.substr var5 var11 var6) (str.at (str.substr var1 var7 var10) (str.len var4))))(assert (<= 9 var9))(assert (str.contains var4 var2))(assert (< (str.len var5) (str.indexof "ng}ml3c,<0" var4 var11)))(check-sat)