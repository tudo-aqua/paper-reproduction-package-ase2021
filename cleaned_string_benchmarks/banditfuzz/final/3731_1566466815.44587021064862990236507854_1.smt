;  depth   = 3
;  nconst  = 6
;  assertions = 7
;  timeout = 2500
;  time    = {'smt_solvers/QF_S/z3seq/': 0.11025285720825195, 'smt_solvers/QF_S/z3str3/': 0.1349623203277588, 'smt_solvers/QF_S/cvc4/': 0.5338733196258545, 'smt_solvers/QF_S/z3str3fed/': 0.0905156135559082}
;  score   = 0.3989109992980957
;  stdout  = {'smt_solvers/QF_S/z3seq/': 'unsat', 'smt_solvers/QF_S/z3str3/': 'unsat', 'smt_solvers/QF_S/cvc4/': 'unsat', 'smt_solvers/QF_S/z3str3fed/': 'unsat'}
(set-logic QF_S)(declare-fun var0 () String)(declare-fun var1 () String)(declare-fun var2 () String)(declare-fun var3 () String)(declare-fun var4 () String)(declare-fun var5 () String)(declare-fun var6 () Int)(declare-fun var7 () Int)(declare-fun var8 () Int)(declare-fun var9 () Int)(declare-fun var10 () Int)(declare-fun var11 () Int)(declare-fun var12 () Bool)(declare-fun var13 () Bool)(declare-fun var14 () Bool)(declare-fun var15 () Bool)(declare-fun var16 () Bool)(declare-fun var17 () Bool)(assert (<= (str.indexof var2 var1 var7) (str.len var2)))(assert (< (str.indexof var0 var1 var7) (str.indexof var5 "p$/$rlxDUp" var9)))(assert (str.contains (str.replace var5 var5 var4) (str.at var5 var8)))(assert (str.in.re var2 re.allchar))(assert (<= (str.indexof (str.at var2 var8) (str.replace var1 var2 var3) (str.indexof var5 "~_uL.&A0>h" var10)) (str.indexof var4 "\\i#\\t`[EM>" var7)))(assert (> (str.len (str.at var0 var9)) (str.len (str.at "z]HX\\({-R}" var9))))(assert (>= (str.indexof (str.substr var1 var8 9) (str.++ var5 var5) (str.indexof var3 var3 var7)) (str.len var0)))(check-sat)