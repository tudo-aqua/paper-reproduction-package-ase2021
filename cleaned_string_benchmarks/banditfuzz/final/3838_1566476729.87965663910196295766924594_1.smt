;  depth   = 3
;  nconst  = 6
;  assertions = 7
;  timeout = 2500
;  time    = {'smt_solvers/QF_S/z3str3fed/': 0.07428789138793945, 'smt_solvers/QF_S/z3seq/': 0.08944582939147949, 'smt_solvers/QF_S/z3str3/': 0.11009001731872559, 'smt_solvers/QF_S/cvc4/': 0.38340044021606445}
;  score   = 0.27331042289733887
;  stdout  = {'smt_solvers/QF_S/z3str3fed/': 'unsat', 'smt_solvers/QF_S/z3seq/': 'unsat', 'smt_solvers/QF_S/z3str3/': 'unsat', 'smt_solvers/QF_S/cvc4/': 'unsat'}
(set-logic QF_S)(declare-fun var0 () String)(declare-fun var1 () String)(declare-fun var2 () String)(declare-fun var3 () String)(declare-fun var4 () String)(declare-fun var5 () String)(declare-fun var6 () Int)(declare-fun var7 () Int)(declare-fun var8 () Int)(declare-fun var9 () Int)(declare-fun var10 () Int)(declare-fun var11 () Int)(declare-fun var12 () Bool)(declare-fun var13 () Bool)(declare-fun var14 () Bool)(declare-fun var15 () Bool)(declare-fun var16 () Bool)(declare-fun var17 () Bool)(assert (str.in.re var4 re.allchar))(assert (str.contains (str.at var0 var6) (str.replace var4 "BoU|={Q>bL" var2)))(assert (str.contains (str.at var2 var10) (str.substr (str.substr "%-ZiZJb~?z" var7 2) (str.len var4) (str.len var3))))(assert (>= var8 var8))(assert (str.suffixof (str.replace var2 var2 var2) (str.substr (str.at "eGLpN5[ek/" var6) (str.len var5) (str.len var5))))(assert (str.in.re (str.substr (str.replace var1 var0 var2) (str.indexof var4 var0 var11) (str.indexof var2 var3 var11)) (re.+ (re.+ re.allchar))))(assert (not var15))(check-sat)