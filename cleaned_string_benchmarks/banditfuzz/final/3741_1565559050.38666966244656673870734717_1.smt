;  depth   = 3
;  nconst  = 6
;  assertions = 5
;  timeout = 2500
;  time    = {'smt_solvers/QF_S/cvc4/': 0.1596360206604004, 'smt_solvers/QF_S/z3str3fed/': 0.07565784454345703, 'smt_solvers/QF_S/z3seq/': 0.09338974952697754, 'smt_solvers/QF_S/z3str3/': 0.09670281410217285}
;  score   = 0.06293320655822754
;  stdout  = {'smt_solvers/QF_S/cvc4/': 'unsat', 'smt_solvers/QF_S/z3str3fed/': 'unsat', 'smt_solvers/QF_S/z3seq/': 'unsat', 'smt_solvers/QF_S/z3str3/': 'unsat'}
(set-logic QF_S)(declare-fun var0 () String)(declare-fun var1 () String)(declare-fun var2 () String)(declare-fun var3 () String)(declare-fun var4 () String)(declare-fun var5 () String)(declare-fun var6 () Int)(declare-fun var7 () Int)(declare-fun var8 () Int)(declare-fun var9 () Int)(declare-fun var10 () Int)(declare-fun var11 () Int)(declare-fun var12 () Bool)(declare-fun var13 () Bool)(declare-fun var14 () Bool)(declare-fun var15 () Bool)(declare-fun var16 () Bool)(declare-fun var17 () Bool)(assert (str.in.re (str.substr var2 var11 var10) (re.+ (re.+ re.allchar))))(assert (< (str.len var5) (str.indexof var1 var1 var6)))(assert (str.suffixof (str.at (str.substr var4 var8 7) (str.len var3)) (str.at (str.replace var0 var0 var5) (str.len var4))))(assert (> var7 var7))(assert (str.contains (str.replace (str.substr "Olm~N^L/'r" var11 var6) (str.at "S(AZbg$\\Oi" var6) (str.substr var5 var8 var10)) (str.replace (str.++ var3 var3) (str.at var5 var6) (str.substr var2 1 var7))))(check-sat)