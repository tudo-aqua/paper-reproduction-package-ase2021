;  depth   = 3
;  nconst  = 6
;  assertions = 7
;  timeout = 2500
;  time    = {'smt_solvers/QF_S/z3str3fed/': 0.06691384315490723, 'smt_solvers/QF_S/z3str3/': 0.11444973945617676, 'smt_solvers/QF_S/z3seq/': 0.08399486541748047, 'smt_solvers/QF_S/cvc4/': 0.37051963806152344}
;  score   = 0.2560698986053467
;  stdout  = {'smt_solvers/QF_S/z3str3fed/': 'unsat', 'smt_solvers/QF_S/z3str3/': 'unsat', 'smt_solvers/QF_S/z3seq/': 'unsat', 'smt_solvers/QF_S/cvc4/': 'unsat'}
(set-logic QF_S)(declare-fun var0 () String)(declare-fun var1 () String)(declare-fun var2 () String)(declare-fun var3 () String)(declare-fun var4 () String)(declare-fun var5 () String)(declare-fun var6 () Int)(declare-fun var7 () Int)(declare-fun var8 () Int)(declare-fun var9 () Int)(declare-fun var10 () Int)(declare-fun var11 () Int)(declare-fun var12 () Bool)(declare-fun var13 () Bool)(declare-fun var14 () Bool)(declare-fun var15 () Bool)(declare-fun var16 () Bool)(declare-fun var17 () Bool)(assert (<= (str.len var4) (str.indexof var1 var0 var11)))(assert (str.suffixof (str.substr var4 6 var6) (str.substr var0 var7 var7)))(assert (str.contains var4 "^Wt)pI=.]d"))(assert (str.suffixof (str.substr "~sLe\\GB/xr" var6 var8) (str.replace "5~AVhVJCy_" var2 var5)))(assert (< (str.indexof (str.substr var1 var10 var11) (str.replace var5 var3 var0) (str.len var4)) (str.indexof var0 var1 var9)))(assert (str.suffixof (str.at var5 var10) (str.replace var4 var1 var1)))(assert (str.contains var1 var1))(check-sat)