;  depth   = 3
;  nconst  = 6
;  assertions = 7
;  timeout = 2500
;  time    = {'smt_solvers/QF_S/z3seq/': 0.08611941337585449, 'smt_solvers/QF_S/z3str3/': 0.09730720520019531, 'smt_solvers/QF_S/cvc4/': 0.21799707412719727, 'smt_solvers/QF_S/z3str3fed/': 0.0698392391204834}
;  score   = 0.12068986892700195
;  stdout  = {'smt_solvers/QF_S/z3seq/': 'unsat', 'smt_solvers/QF_S/z3str3/': 'unsat', 'smt_solvers/QF_S/cvc4/': 'unsat', 'smt_solvers/QF_S/z3str3fed/': 'unsat'}
(set-logic QF_S)(declare-fun var0 () String)(declare-fun var1 () String)(declare-fun var2 () String)(declare-fun var3 () String)(declare-fun var4 () String)(declare-fun var5 () String)(declare-fun var6 () Int)(declare-fun var7 () Int)(declare-fun var8 () Int)(declare-fun var9 () Int)(declare-fun var10 () Int)(declare-fun var11 () Int)(declare-fun var12 () Bool)(declare-fun var13 () Bool)(declare-fun var14 () Bool)(declare-fun var15 () Bool)(declare-fun var16 () Bool)(declare-fun var17 () Bool)(assert (str.contains (str.substr (str.at var0 var8) (str.len var4) (str.len var2)) (str.at (str.at var4 var7) (str.indexof var2 var5 var10))))(assert (str.in.re var4 re.allchar))(assert (>= (str.len var4) (str.indexof var5 var5 var11)))(assert (str.in.re (str.at var2 var8) (re.inter re.allchar re.allchar)))(assert (<= 1 var7))(assert (> (str.indexof var1 var1 4) (str.indexof "zsq&Bvel-z" var2 var7)))(assert (str.prefixof (str.replace ")=)J?/)w(D" var1 var5) (str.replace var3 var4 var0)))(check-sat)