;  depth   = 3
;  nconst  = 6
;  assertions = 7
;  timeout = 2500
;  time    = {'smt_solvers/QF_S/z3str3fed/': 0.06401467323303223, 'smt_solvers/QF_S/z3str3/': 0.1319725513458252, 'smt_solvers/QF_S/z3seq/': 0.08147573471069336, 'smt_solvers/QF_S/cvc4/': 0.19339394569396973}
;  score   = 0.06142139434814453
;  stdout  = {'smt_solvers/QF_S/z3str3fed/': 'unsat', 'smt_solvers/QF_S/z3str3/': 'unsat', 'smt_solvers/QF_S/z3seq/': 'unsat', 'smt_solvers/QF_S/cvc4/': 'unsat'}
(set-logic QF_S)(declare-fun var0 () String)(declare-fun var1 () String)(declare-fun var2 () String)(declare-fun var3 () String)(declare-fun var4 () String)(declare-fun var5 () String)(declare-fun var6 () Int)(declare-fun var7 () Int)(declare-fun var8 () Int)(declare-fun var9 () Int)(declare-fun var10 () Int)(declare-fun var11 () Int)(declare-fun var12 () Bool)(declare-fun var13 () Bool)(declare-fun var14 () Bool)(declare-fun var15 () Bool)(declare-fun var16 () Bool)(declare-fun var17 () Bool)(assert (str.in.re var0 re.allchar))(assert (> (str.len var0) (str.indexof (str.at var2 var8) (str.at "duA(ER7XJF" var6) (str.len var1))))(assert (str.prefixof var0 var5))(assert (str.suffixof (str.at (str.substr var2 var8 8) (str.len var1)) (str.replace (str.substr var1 10 var6) (str.substr var4 var7 var11) (str.substr var5 var11 var7))))(assert (str.in.re (str.at var5 var11) (re.++ re.allchar re.allchar)))(assert (< 4 var8))(assert (< (str.indexof var2 var3 var11) (str.len var0)))(check-sat)