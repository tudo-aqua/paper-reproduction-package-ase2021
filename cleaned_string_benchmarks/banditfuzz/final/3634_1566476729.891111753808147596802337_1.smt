;  depth   = 3
;  nconst  = 6
;  assertions = 7
;  timeout = 2500
;  time    = {'smt_solvers/QF_S/z3seq/': 0.09435558319091797, 'smt_solvers/QF_S/z3str3/': 0.11372828483581543, 'smt_solvers/QF_S/z3str3fed/': 0.07712459564208984, 'smt_solvers/QF_S/cvc4/': 0.41675591468811035}
;  score   = 0.3030276298522949
;  stdout  = {'smt_solvers/QF_S/z3seq/': 'unsat', 'smt_solvers/QF_S/z3str3/': 'unsat', 'smt_solvers/QF_S/z3str3fed/': 'unsat', 'smt_solvers/QF_S/cvc4/': 'unsat'}
(set-logic QF_S)(declare-fun var0 () String)(declare-fun var1 () String)(declare-fun var2 () String)(declare-fun var3 () String)(declare-fun var4 () String)(declare-fun var5 () String)(declare-fun var6 () Int)(declare-fun var7 () Int)(declare-fun var8 () Int)(declare-fun var9 () Int)(declare-fun var10 () Int)(declare-fun var11 () Int)(declare-fun var12 () Bool)(declare-fun var13 () Bool)(declare-fun var14 () Bool)(declare-fun var15 () Bool)(declare-fun var16 () Bool)(declare-fun var17 () Bool)(assert (str.contains (str.replace var0 var3 var1) (str.replace (str.at var2 var7) (str.at var2 4) (str.at var0 var10))))(assert (not (not true)))(assert (>= (str.indexof var5 var5 var10) (str.indexof var2 var3 var8)))(assert (<= (str.indexof "*M\\}`\\mi?9" var0 var10) (str.len (str.substr var4 var6 6))))(assert (< (str.len var2) (str.indexof (str.substr var3 var7 var8) (str.replace var2 var3 var2) (str.len var4))))(assert (str.contains (str.at (str.at var2 var8) (str.len var2)) (str.replace var3 "X#U{sEtW[p" "B6yj""3.O\\p")))(assert (str.prefixof var2 var2))(check-sat)