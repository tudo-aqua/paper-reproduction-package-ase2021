;  depth   = 3
;  nconst  = 6
;  assertions = 7
;  timeout = 2500
;  time    = {'smt_solvers/QF_S/cvc4/': 0.37528562545776367, 'smt_solvers/QF_S/z3str3/': 0.11672449111938477, 'smt_solvers/QF_S/z3str3fed/': 0.07613015174865723, 'smt_solvers/QF_S/z3seq/': 0.0942692756652832}
;  score   = 0.2585611343383789
;  stdout  = {'smt_solvers/QF_S/cvc4/': 'unsat', 'smt_solvers/QF_S/z3str3/': 'unsat', 'smt_solvers/QF_S/z3str3fed/': 'unsat', 'smt_solvers/QF_S/z3seq/': 'unsat'}
(set-logic QF_S)(declare-fun var0 () String)(declare-fun var1 () String)(declare-fun var2 () String)(declare-fun var3 () String)(declare-fun var4 () String)(declare-fun var5 () String)(declare-fun var6 () Int)(declare-fun var7 () Int)(declare-fun var8 () Int)(declare-fun var9 () Int)(declare-fun var10 () Int)(declare-fun var11 () Int)(declare-fun var12 () Bool)(declare-fun var13 () Bool)(declare-fun var14 () Bool)(declare-fun var15 () Bool)(declare-fun var16 () Bool)(declare-fun var17 () Bool)(assert (str.contains (str.substr var5 var7 var9) (str.at var5 var9)))(assert (not (<= var7 var10)))(assert (<= (str.len var0) (str.indexof var5 var4 var9)))(assert (str.prefixof (str.replace var4 var1 var5) (str.at var0 var7)))(assert (str.suffixof (str.at var3 3) (str.replace ".'T}OJ5.G^" "rMjPC|n/Jl" var4)))(assert (not (str.in.re (str.replace var1 "XRV2+1%g4O" var4) (re.+ re.allchar))))(assert (> (str.indexof var4 var1 var8) (str.len "G(WkeR[h^7")))(check-sat)