(set-option :produce-models true)
(declare-fun var1049 () String)
(declare-fun var1051 () String)
(declare-fun var1052 () String)
(declare-fun var1054 () String)
(declare-fun var1055 () String)
(declare-fun var1056 () String)
(declare-fun var1058 () String)
(declare-fun var1059 () String)
(declare-fun var1060 () String)
(declare-fun var1062 () Bool)
(declare-fun var1064 () String)
(declare-fun var1065 () Int)
(declare-fun var1069 () Int)
(declare-fun var1070 () Bool)
(declare-fun var1071 () String)
(declare-fun sv1 () String)
(declare-fun sv2 () String)

(assert (= sv1 sv2 ) )
(assert (str.in.re var1055 (re.++ (re.++ (re.++  (re.++ (re.* re.allchar ) (re.++  (str.to.re "\x27") (re.++ (re.+  (str.to.re "\x20") ) (re.++  (re.union  (str.to.re "\x4f")  (str.to.re "\x6f")) (re.++  (re.union  (str.to.re "\x52")  (str.to.re "\x72")) (re.++ (re.+  (str.to.re "\x20") )  (str.to.re "\x27"))))))) (str.to.re sv1) ) (re.++  (re.++  (str.to.re "\x27") (re.++ (re.* re.allchar ) (re.++  (str.to.re "\x3d") (re.++ (re.* re.allchar )  (str.to.re "\x27"))))) (str.to.re sv2) ) )  (re.++  (str.to.re "\x27") (re.++ (re.*  (str.to.re "\x20") )  (re.union  (re.++  (str.to.re "\x5c\x2d")  (str.to.re "\x5c\x2d"))  (str.to.re "\x23")))) ) ) )
(assert (= var1049 var1051 ) )
(assert (= var1051 (str.++ var1052 "'\x29" ) ) )
(assert (= var1052 (str.++ var1054 var1055 ) ) )
(assert (= var1054 (str.++ var1056 "', 'USER', '" ) ) )
(assert (= var1056 (str.++ var1058 var1059 ) ) )
(assert (= var1058 (str.++ var1060 "INSERT INTO Users \x28name, type, password\x29 VALUES \x28'" ) ) )
(assert (not (= var1062 false )) )
(assert (= var1062 (= var1055 var1064 ) ) )
(assert (= var1065 (str.len var1055 ) ) )
(assert (not (= var1055 "" )) )
(assert (= var1069 (str.len var1059 ) ) )
(assert (not (= var1059 "" )) )
(assert (not (= var1070 false )) )
(assert (= var1070 (= var1071 "POST" ) ) )

(check-sat)
(get-model)
