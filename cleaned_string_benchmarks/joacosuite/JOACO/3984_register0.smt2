(set-option :produce-models true)
(declare-fun var1393 () String)
(declare-fun var1395 () String)
(declare-fun var1396 () String)
(declare-fun var1398 () String)
(declare-fun var1399 () String)
(declare-fun var1400 () String)
(declare-fun var1402 () String)
(declare-fun var1403 () String)
(declare-fun var1404 () String)
(declare-fun var1406 () Bool)
(declare-fun var1408 () String)
(declare-fun var1409 () Int)
(declare-fun var1413 () Int)
(declare-fun var1414 () Bool)
(declare-fun var1415 () String)
(declare-fun sv1 () String)
(declare-fun sv2 () String)

(assert (= sv1 sv2 ) )
(assert (str.in.re var1403 (re.++ (re.++ (re.++  (re.++ (re.* re.allchar ) (re.++  (str.to.re "\x27") (re.++ (re.+  (str.to.re "\x20") ) (re.++  (re.union  (str.to.re "\x4f")  (str.to.re "\x6f")) (re.++  (re.union  (str.to.re "\x52")  (str.to.re "\x72")) (re.++ (re.+  (str.to.re "\x20") )  (str.to.re "\x27"))))))) (str.to.re sv1) ) (re.++  (re.++  (str.to.re "\x27") (re.++ (re.* re.allchar ) (re.++  (str.to.re "\x3d") (re.++ (re.* re.allchar )  (str.to.re "\x27"))))) (str.to.re sv2) ) )  (re.++  (str.to.re "\x27") (re.++ (re.*  (str.to.re "\x20") )  (re.union  (re.++  (str.to.re "\x5c\x2d")  (str.to.re "\x5c\x2d"))  (str.to.re "\x23")))) ) ) )
(assert (= var1393 var1395 ) )
(assert (= var1395 (str.++ var1396 "'\x29" ) ) )
(assert (= var1396 (str.++ var1398 var1399 ) ) )
(assert (= var1398 (str.++ var1400 "', 'USER', '" ) ) )
(assert (= var1400 (str.++ var1402 var1403 ) ) )
(assert (= var1402 (str.++ var1404 "INSERT INTO Users \x28name, type, password\x29 VALUES \x28'" ) ) )
(assert (not (= var1406 false )) )
(assert (= var1406 (= var1399 var1408 ) ) )
(assert (= var1409 (str.len var1399 ) ) )
(assert (not (= var1399 "" )) )
(assert (= var1413 (str.len var1403 ) ) )
(assert (not (= var1403 "" )) )
(assert (not (= var1414 false )) )
(assert (= var1414 (= var1415 "POST" ) ) )

(check-sat)
(get-model)
